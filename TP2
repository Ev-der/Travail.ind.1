
############################################
# Eva Desbiens <Ev-der>
# Prénom2 Nom2 <github username>
############################################

import math

#Variables globales définies (listes)
noms = []
postes = []
vitesse = []
passes= []
tirs= []
buts= []



def peupler(ma_chaine: str) -> tuple[list[str], list[str], list[float], list[int], list[int], list[int]]:
    #Séparation de notre chaîne de caractères en liste
    info_liste= ma_chaine.split(' ')
    #S'il y a plusieurs espaces séparant les données
    while '' in info_liste:
        info_liste.remove('')
    #Nom complet en majuscule
    #for cap in range(len(info_liste[:-5])):
        #info_liste[cap]=info_liste[cap].capitalize()
    # Attribution des données dans leur liste respective
    nom_complet = ' '.join(info_liste[:-5])
    noms.append(nom_complet)
    postes.append(info_liste[-5])
    vitesse.append(float(info_liste[-4]))
    passes.append(int(info_liste[-3]))
    tirs.append(int(info_liste[-2]))
    buts.append(int(info_liste[-1]))
    return noms, postes, vitesse,passes, tirs,buts


def efficacite(vitesse: float, passes: int, tirs: int, buts: int) -> float:
   #Calcul de performance en utilisant des données fixes
    Performance = (30*vitesse+40*passes+20*tirs+10*buts)/100
    return Performance


def affichage_informations(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int],
                           tirs: list[int], buts: list[int]) -> None:
    print('-------------------------------------------Liste des joueurs---------------------------------------------')
    for joueur in range (len(noms)):
        print('----------------------------------------')
        print('Nom : '+ noms[joueur])
        print('Poste : '+ postes[joueur] )
        print('Vitesse : ' + str(vitesse[joueur])+' km/h')
        print('Passes : '+ str(passes[joueur]))
        print('Tirs cadrés : '+ str(tirs[joueur]))
        print('Buts : '+ str(buts[joueur]))
        #Appel de la fonction efficacité
        print(' Efficacité : '+ str(efficacite(vitesse[joueur],passes[joueur],tirs[joueur],buts[joueur])))
    print('--------------------------------------------')


def meilleurs_joueurs(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int], tirs: list[int],
                      buts: list[int]) -> None:
    eff_equipe=[] #liste interne de la fonction
    print('Le(s) meilleur(s) joueur(s) de l\'équipe sont/est : ')
    #Création d'une liste interne avec les efficacités des différents joueurs
    for joueur in range(len(noms)):
        eff_equipe.append(efficacite(vitesse[joueur],passes[joueur],tirs[joueur],buts[joueur]))
    #Mise en ordre croissant des données d'efficacité
    eff_equipe.sort()
    #Attribuer la meilleure efficacité aux noms de joueur
    for joueur in range(len(noms)):
        if (efficacite(vitesse[joueur],passes[joueur],tirs[joueur],buts[joueur])) == eff_equipe[-1]:
            print(noms[joueur]+' au poste '+postes[joueur])
        else:
            pass


def moyenne_efficacites(vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int]) -> float:
    moyenne = 0 #Variable interne
    for joueur in range(len(vitesse)):
        # Appel de la fonction efficacité pour chaque joueur avec accumulation dans la boucle for
        moyenne = efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur]) + moyenne
    moyenne_équipe = moyenne / (len(vitesse))
    return moyenne_équipe


def ecart_type(vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int]) -> float:
    car_ecart = 0 #Variable interne
    #Calcul de l'écart-type
    for joueur in range(len(vitesse)):
        car_ecart= (efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur])
                    -moyenne_efficacites(vitesse,passes,tirs,buts))**2+car_ecart
    Variance = car_ecart/len(vitesse)
    Ecart_type= math.sqrt(Variance)
    return Ecart_type

def division(seuil: float, noms: list[str], vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int])\
        -> tuple[list[str], list[str]]:
    list_pro, list_nul = [], []        #Listes internes
    #Déterminer la division du joueur
    for joueur in range(len(noms)):
        #Efficacité des joueurs
        eff_joueur= efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur])
        if int(eff_joueur) >= int(seuil):
            list_pro.append(noms[joueur])
        else:
            list_nul.append(noms[joueur])
    return list_pro,list_nul


def trier_efficacite(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int], tirs: list[int],
                     buts: list[int]) -> None:
    eff_equipe=[] #liste interne
    #Création d'une liste interne avec les différentes efficacités des joueurs
    for joueur in range(len(noms)):
        eff_equipe.append(efficacite(vitesse[joueur],passes[joueur],tirs[joueur],buts[joueur]))
    #Liste en ordre décroissant
    eff_equipe.sort(reverse=True)
    #Association des efficacités à leur joueur respectif et palmarès décroissant
    for place in range(len(eff_equipe)):
        if eff_equipe != []:
            for joueur in range(len(noms)):
                if (eff_equipe[place]) == (efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur])):
                    print(str(place + 1) + '.' + noms[joueur] + ' (' + postes[joueur] + ') - Efficacité : ' + str(
                        eff_equipe[place]))
                    del eff_equipe[place]
                else:
                    pass
        else:
            break
#------------------------------------Code----------------------------------------#

#1: Saisie des informations des joueurs
for i in range (1,6):
    ma_chaine = input('Donnez les informations du joueur ' + str(i) + ': ')
    ma_chaine= ma_chaine.title() #poste et nom en majuscule
    while (ma_chaine.count('Défenseur')+ ma_chaine.count('Attaquant') + ma_chaine.count('Milieu')
         + ma_chaine.count('Gardien')!= 1):
       ma_chaine = input('Donnez les informations du joueur ' + str(i)+ ': ')
    peupler(ma_chaine) #Appel de la fonction peupler


#3 Affichage des informations sur le joueur ; Appel de la fonction affichage_informations
affichage_informations(noms, postes, vitesse, passes, tirs, buts)

#4 Affichage des meilleurs joueurs ; Appel de la fonction meilleur_joueur
meilleurs_joueurs(noms,postes,vitesse,passes,tirs,buts)

#7 Implémentation d'un seuil, le définir :
réponse = input('Définissez un seuil (\' non\' pour d/finir l\'écart type en seuil) :' )
#Possibilités de seuil au choix
if réponse == ('non') or réponse == ('Non'):
    #Appel de la fonction ecart_type
    seuil=ecart_type(vitesse,passes,tirs,buts)
else:
    seuil = réponse

#Afficher les listes de joueurs selon le seuil ; Appel de la fonction division
print('Les joueurs dépassant le seuil définit : '+ str(division(seuil,noms,vitesse,passes,tirs,buts)[0]))
print('Les joueurs ne dépassant pas le seuil définit : '+str(division(seuil,noms,vitesse,passes,tirs,buts)[1]))
print('--------------------------------------------')

#Titre pûrement esthétique
print('Palmarès des joueurs :')
#Appel de la fonction trier_efficacite
trier_efficacite(noms,postes,vitesse,passes,tirs,buts)
