from typing import List, Tuple
import math
############################################
# Eva Desbiens <Ev-der>
# Prénom2 Nom2 <github username>
############################################
noms = []
postes = []
vitesse = []
passes= []
tirs= []
buts= []
moyenne_équipe=0 #Variable globale


def peupler(ma_chaine: str) -> tuple[list[str], list[str], list[float], list[int], list[int], list[int]]:
    Info_liste= ma_chaine.split(' ')
    nom_complet = ' '.join(Info_liste[:-5])
    noms.append(nom_complet)
    (Info_liste[-5])[0].upper()
    postes.append(Info_liste[-5])
    vitesse.append(float(Info_liste[-4]))
    passes.append(int(Info_liste[-3]))
    tirs.append(int(Info_liste[-2]))
    buts.append(int(Info_liste[-1]))
    return noms, postes, vitesse,passes, tirs,buts


def efficacite(vitesse: float, passes: int, tirs: int, buts: int) -> float:
    Performance = (30*vitesse+40*passes+20*tirs+10*buts)/100
    return Performance


def affichage_informations(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int],
                           tirs: list[int], buts: list[int]) -> None:
    print('-------------------------------------------Liste des joueurs---------------------------------------------')
    for joueur in range (len(noms)):
        print('----------------------------------------')
        print('Nom : '+ noms[joueur])
        print('Poste : '+ postes[joueur] )
        print('Vitesse : ' + str(vitesse[joueur]))
        print('Passes : '+ str(passes[joueur]))
        print('Tirs cadrés : '+ str(tirs[joueur]))
        print('Buts : '+ str(buts[joueur]))
        #Appel de la fonction efficacité
        print(' Efficacité : '+ str(efficacite(vitesse[joueur],passes[joueur],tirs[joueur],buts[joueur])))


def meilleurs_joueurs(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int], tirs: list[int],
                      buts: list[int]) -> None:
    pass 



def moyenne_efficacites(vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int]) -> float:
    moyenne = 0 #Variable interne
    for joueur in range(len(vitesse)):
        # Appel de la fonction efficacité pour chaque joueur avec accumulation dans la boucle for
        moyenne = efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur]) + moyenne
    moyenne_équipe = moyenne / (len(vitesse))
    return moyenne_équipe #variable globale


def ecart_type(vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int]) -> float:
    car_ecart = 0 #Variable interne
    for joueur in range(len(vitesse)):
        car_ecart= (efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur])-moyenne_équipe)**2+car_ecart
    Variance = car_ecart/len(vitesse)
    Ecart_type= math.sqrt(Variance)
    return Ecart_type


def division(seuil: float, noms: list[str], vitesse: list[float], passes: list[int], tirs: list[int], buts: list[int])\
        -> tuple[list[str], list[str]]:
    list_pro, list_nul = [], []         #Listes internes
    for joueur in range(len(noms)):
        eff_joueur= efficacite(vitesse[joueur], passes[joueur], tirs[joueur], buts[joueur])
        if eff_joueur >= seuil:
            list_pro.append(noms[joueur])
        else:
            list_nul.append(noms[joueur])
    return list_pro,list_nul



def trier_efficacite(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int], tirs: list[int],
                     buts: list[int]) -> None:
---------------------------------------------------------------------------------

noms = []
postes = []
vitesse = []
passes= []
tirs= []
buts= []

#1
def peupler(ma_chaine: str) -> tuple[list[str], list[str], list[float], list[int], list[int], list[int]]:
    Info_liste= ma_chaine.split(' ')
    nom_complet = ' '.join(Info_liste[:-5])
    noms.append(nom_complet)
    (Info_liste[-5])[0].upper()
    postes.append(Info_liste[-5])
    vitesse.append(float(Info_liste[-4]))
    passes.append(int(Info_liste[-3]))
    tirs.append(int(Info_liste[-2]))
    buts.append(int(Info_liste[-1]))
    return noms, postes, vitesse,passes, tirs,buts

#2
def efficacite(vitesse: float, passes: int, tirs: int, buts: int) -> float:
    Performance = (30*vitesse+40*passes+20*tirs+10*buts)/100
    return Performance

#3 Affichage des informations
def affichage_informations(noms: list[str], postes: list[str], vitesse: list[float], passes: list[int],
                           tirs: list[int], buts: list[int]) -> None:
    print('----------------------------------------------Liste des joueurs------------------------------------------------')
    for i in range (1,6):
        print('----------------------------------------')
        print('Nom : '+ noms[i-1])
        print('Poste : '+ postes[i-1] )
        print('Vitesse : ' + str(vitesse[i-1]))
        print('Passes : '+ str(passes[i-1]))
        print('Tirs cadrés : '+ str(tirs[i-1]))
        print('Buts : '+ str(buts[i-1]))
        print(' Efficacité : '+ str(efficacite(vitesse[i-1],passes[i-1],tirs[i-1],buts[i-1])))
#-------------------------------------------Code---------------------------------------------

#1: Saisie des informations des joueurs
for i in range (1,6):
    ma_chaine = input('Donnez les informations du joueur ' + str(i) + ': ')
#majuscule:_________________________________________
    while (ma_chaine.count('Défenseur')+ ma_chaine.count('Attaquant') + ma_chaine.count('Milieu')
         + ma_chaine.count('Gardien')!= 1):
       ma_chaine = input('Donnez les informations du joueur ' + str(i)+ ': ')
    peupler(ma_chaine) #Appel de la fonction peupler
print(noms,postes, vitesse,passes, tirs, buts)

#3 Affichage des informations sur le joueur
affichage_informations(noms, postes, vitesse, passes, tirs, buts)
